{{>partial_header}}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Collections;
using RestSharp;
using Newtonsoft.Json.Linq;
using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.Model;
{{/hasImport}}

namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface I{{classname}} : IApiAccessor
    {
        #region Synchronous Operations
        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
        {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}} ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}> {{operationId}}WithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        {{/operation}}
        #endregion Synchronous Operations
        {{#supportsAsync}}
        #region Asynchronous Operations
        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>Task of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#returnType}}System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>Task of ApiResponse{{#returnType}} ({{returnType}}){{/returnType}}</returns>
        System.Threading.Tasks.Task<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>> {{operationId}}AsyncWithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        {{/operation}}
        #endregion Asynchronous Operations
        {{/supportsAsync}}
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class {{classname}} : I{{classname}}
    {
        private {{packageName}}.Client.ExceptionFactory _exceptionFactory = (name, request, response) => null;

        private Dictionary<string, int> limits = null;

        /// <summary>
        /// Retrieves the cellstore page limit for a give resource.
        /// </summary>
        /// <param name="resource">Resource</param>
        /// <param name="token">Token</param>
        /// <returns>Max page limit as integer</returns>
        private int GetLimit(string resource, string token)
        {
            if (limits == null)
            {
                limits = new Dictionary<string, int>();
                try
                {
                    IRestRequest request = new RestRequest("/api/configuration", Method.GET);
                    request.AddQueryParameter("token", token);
                    IRestResponse response = (IRestResponse)Configuration.ApiClient.CallApi(request);
                    int statusCode = (int)response.StatusCode;

                    if (ExceptionFactory != null)
                    {
                        Exception exception = ExceptionFactory("GetConfiguration", request, response);
                        if (exception != null) throw exception;
                    }

                    Object cellstoreConfig = Configuration.ApiClient.Deserialize(response, typeof(Object), null);
                    JObject limitsObj = ApiClient.GetField<JObject>(cellstoreConfig, new String[] { "limits" });
                    foreach (String key in limitsObj.Properties().Select(p => p.Name).ToList())
                    {
                        int value = ApiClient.GetField<int>(cellstoreConfig, new String[] { "limits", key, "page" });
                        limits.Add(key, value);
                    }
                }
                catch (ApiException e)
                {
                    if (e.ErrorCode == 400 || e.ErrorCode == 404)
                        return Configuration.DefaultAutoPaginateLimit(resource);
                    else
                        throw e;
                }
            }
            int limit;
            if (limits.TryGetValue(resource, out limit))
                return limit;
            else
                return Configuration.DefaultAutoPaginateLimit(resource);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <returns></returns>
        public {{classname}}(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public {{classname}}(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = {{packageName}}.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public {{packageName}}.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        {{#operation}}
        #region {{operationId}}
        /// <summary>
        /// Builds a request for {{operationId}}.
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when an error happens building the API request</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>IRestRequest</returns>
        private IRestRequest {{operationId}}BuildRequest ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#allParams}}
            {{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
                throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");
            {{/required}}
            {{/allParams}}

            var localVarPath = "{{path}}";
            var localVarPathParams = new Dictionary<String, String>();
/* 28msec */
            var localVarQueryParams = new Dictionary<String, List<String>>();
/* 28msec */
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                {{#consumes}}
                "{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}
                {{/consumes}}
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
/* 28msec */
/* 28msec */
            {{#hardcodedQueryParams}}localVarQueryParams.Add("{{baseName}}", Configuration.ApiClient.ParameterToString("{{defaultValue}}")); // hardcoded query parameter
            {{/hardcodedQueryParams}}
            {{#pathParams}}
            if ({{paramName}} != null) localVarPathParams.Add("{{baseName}}", Configuration.ApiClient.SingleParameterToString({{paramName}})); // path parameter
            {{/pathParams}}
            {{#queryParams}}
            if ({{paramName}} != null) localVarQueryParams.Add("{{baseName}}", Configuration.ApiClient.ParameterToString({{paramName}})); // query parameter
            {{/queryParams}}
            {{#patternQueryParams}}if ({{paramName}} != null) Configuration.ApiClient.AddPatternQueryParameters({{paramName}}, "{{pattern}}", localVarQueryParams); // pattern query parameter
            {{/patternQueryParams}}
            {{#headerParams}}
            if ({{paramName}} != null) localVarHeaderParams.Add("{{baseName}}", Configuration.ApiClient.SingleParameterToString({{paramName}})); // header parameter
            {{/headerParams}}
            {{#formParams}}
            if ({{paramName}} != null) {{#isFile}}localVarFileParams.Add("{{baseName}}", Configuration.ApiClient.ParameterToFile("{{baseName}}", {{paramName}}));{{/isFile}}{{^isFile}}localVarFormParams.Add("{{baseName}}", Configuration.ApiClient.SingleParameterToString({{paramName}})); // form parameter{{/isFile}}
            {{/formParams}}
/* 28msec */
            {{#bodyParam}}
            if ({{paramName}} != null)
            {
                if ({{paramName}} is byte[] || {{paramName}} is string || {{paramName}} is String)
                    localVarPostBody = {{paramName}};
                else if ({{paramName}} is JObject)
                    localVarPostBody = Configuration.ApiClient.Serialize({{paramName}});
                else if ({{paramName}} is IEnumerable<string>)
                {
                    StringBuilder localVarSb = new StringBuilder();
                    foreach (string localVarItem in {{paramName}} as IEnumerable<string>)
                        localVarSb.AppendLine(localVarItem);
                    localVarPostBody = localVarSb.ToString();
                }
                else if ({{paramName}} is IEnumerable<String>)
                {
                    StringBuilder localVarSb = new StringBuilder();
                    foreach (string localVarItem in {{paramName}} as IEnumerable<String>)
                        localVarSb.AppendLine(localVarItem);
                    localVarPostBody = localVarSb.ToString();
                }
                else if ({{paramName}} is IEnumerable<JObject>)
                {
                    StringBuilder localVarSb = new StringBuilder();
                    foreach (dynamic localVarItem in {{paramName}} as IEnumerable<JObject>)
                        localVarSb.AppendLine(Configuration.ApiClient.Serialize(localVarItem));
                    localVarPostBody = localVarSb.ToString();
                }
                else if ({{paramName}} is IEnumerable && !({{paramName}} is JContainer))
                {
                    StringBuilder localVarSb = new StringBuilder();
                    foreach (dynamic localVarItem in {{paramName}} as IEnumerable)
                        localVarSb.AppendLine(Configuration.ApiClient.Serialize(localVarItem));
                    localVarPostBody = localVarSb.ToString();
                }
                else
                    localVarPostBody = Configuration.ApiClient.Serialize({{paramName}});
            }
            {{/bodyParam}}

            {{#authMethods}}
            // authentication ({{name}}) required
            {{#isApiKey}}
            {{#isKeyInHeader}}
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarHeaderParams["{{keyParamName}}"] = Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("{{keyParamName}}")))
            {
                localVarQueryParams["{{keyParamName}}"] = Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }
            {{/isBasic}}
            {{#isOAuth}}
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }{{/isOAuth}}
            {{/authMethods}}

            // build the HTTP request and return it
            return (IRestRequest) Configuration.ApiClient.PrepareRequest(localVarPath,
                Method.{{httpMethod}}, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
        }

        /// <summary>
        /// Produces an ApiResponse object given a raw HTTP response for {{operationId}}.
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when the result of the API call is invalid</exception>
        /// <param name="request">Request</param>
        /// <param name="response">Response</param>
        /// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        private ApiResponse<{{#returnType}} {{{returnType}}} {{/returnType}}{{^returnType}}Object{{/returnType}}> {{operationId}}ProcessResponse (IRestRequest request, IRestResponse response)
        {
            int statusCode = (int) response.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("{{operationId}}", request, response);
                if (exception != null) throw exception;
            }

            String format = null;

            foreach (Parameter parameter in request.Parameters)
            {
                if (parameter.Type == ParameterType.QueryString && parameter.Name.Equals("format"))
                {
                    format = parameter.Value.ToString();
                    break;
                }
            }

            {{#returnType}}return new ApiResponse<{{{returnType}}}>(statusCode,
                response.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                ({{{returnType}}}) Configuration.ApiClient.Deserialize(response, typeof({{#returnContainer}}{{{returnContainer}}}{{/returnContainer}}{{^returnContainer}}{{{returnType}}}{{/returnContainer}}), format));{{/returnType}}
            {{^returnType}}return new ApiResponse<Object>(statusCode,
                response.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);{{/returnType}}
        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// {{#autoPaginate}}This method supports automatic pagination. When a request is made without specifying the top or skip parameter, all results are returned, as if the page length was infinite.{{/autoPaginate}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
        public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}} ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
             {{#returnType}}ApiResponse<{{{returnType}}}> localVarResponse = {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
             return localVarResponse.Data;{{/returnType}}{{^returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{/returnType}}
        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// {{#autoPaginate}}This method supports automatic pagination. When a request is made without specifying the top or skip parameter, all results are returned, as if the page length was infinite.{{/autoPaginate}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        public ApiResponse<{{#returnType}} {{{returnType}}} {{/returnType}}{{^returnType}}Object{{/returnType}}> {{operationId}}WithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#autoPaginate}}
            if ({{{autoPaginateIfNotSpecifiedCondition}}})
            {
                ApiResponse<Object> localVarFirstResponse = null;
                JObject localVarRet = null;
                top = GetLimit("{{{autoPaginateLimitField}}}", token);
                skip = 0;
                int localVarNumRequests = 0;
                int localVarRetrieved;
                do
                {
                    IRestRequest localVarRequest = {{operationId}}BuildRequest({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
                    IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarRequest);
                    ApiResponse<Object> localVarApiResponse = {{operationId}}ProcessResponse(localVarRequest, localVarResponse);
                    if (localVarFirstResponse == null)
                        localVarFirstResponse = localVarApiResponse;
                    Object localVarResponseBody = localVarApiResponse.Data;

                    try
                    {
                        localVarRet = ApiClient.MergeResponses(localVarRet, localVarResponseBody, "{{autoPaginateCountField}}", "{{autoPaginateResultField}}");
                        localVarRetrieved = ApiClient.GetField<int>(localVarResponseBody, new string[] { "Statistics", "{{autoPaginateCountField}}" });
                    }
                    catch (ApiException e)
                    {
                        throw new ApiException(localVarApiResponse.StatusCode, e.Message, localVarRequest, localVarResponse);
                    }
                    skip += top;
                    localVarNumRequests++;
                }
                while (localVarRetrieved == top);
                ApiClient.GetField<JObject>(localVarRet, new string[] { "Statistics" }).Add("NumRequests", localVarNumRequests);
                return new ApiResponse<Object>(localVarFirstResponse.StatusCode, localVarFirstResponse.Headers, localVarRet);
            }
            else
            {
                IRestRequest localVarRequest = {{operationId}}BuildRequest({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
                IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarRequest);
                return {{operationId}}ProcessResponse(localVarRequest, localVarResponse);
            }
            {{/autoPaginate}}
            {{^autoPaginate}}
            IRestRequest localVarRequest = {{operationId}}BuildRequest({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarRequest);
            return {{operationId}}ProcessResponse(localVarRequest, localVarResponse);
            {{/autoPaginate}}
        }

        {{#supportsAsync}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// {{#autoPaginate}}This method supports automatic pagination. When a request is made without specifying the top or skip parameter, all results are returned, as if the page length was infinite.{{/autoPaginate}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>Task of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#returnType}}public async System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}public async System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
             {{#returnType}}ApiResponse<{{{returnType}}}> localVarResponse = await {{operationId}}AsyncWithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
             return localVarResponse.Data;{{/returnType}}{{^returnType}}await {{operationId}}AsyncWithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{/returnType}}
        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// {{#autoPaginate}}This method supports automatic pagination. When a request is made without specifying the top or skip parameter, all results are returned, as if the page length was infinite.{{/autoPaginate}}
        /// </summary>
        /// <exception cref="{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}</param>
        {{/allParams}}/// <returns>Task of ApiResponse{{#returnType}} ({{returnType}}){{/returnType}}</returns>
        public async System.Threading.Tasks.Task<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>> {{operationId}}AsyncWithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#autoPaginate}}
            if ({{{autoPaginateIfNotSpecifiedCondition}}})
            {
                ApiResponse<Object> localVarFirstResponse = null;
                JObject localVarRet = null;
                top = GetLimit("{{{autoPaginateLimitField}}}", token);
                skip = 0;
                int localVarNumRequests = 0;
                int localVarRetrieved;
                do
                {
                    IRestRequest localVarRequest = {{operationId}}BuildRequest({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
                    IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarRequest);
                    ApiResponse<Object> localVarApiResponse = {{operationId}}ProcessResponse(localVarRequest, localVarResponse);
                    if (localVarFirstResponse == null)
                        localVarFirstResponse = localVarApiResponse;
                    Object localVarResponseBody = localVarApiResponse.Data;

                    try
                    {
                        localVarRet = ApiClient.MergeResponses(localVarRet, localVarResponseBody, "{{autoPaginateCountField}}", "{{autoPaginateResultField}}");
                        localVarRetrieved = ApiClient.GetField<int>(localVarResponseBody, new string[] { "Statistics", "{{autoPaginateCountField}}" });
                    }
                    catch (ApiException e)
                    {
                        throw new ApiException(localVarApiResponse.StatusCode, e.Message, localVarRequest, localVarResponse);
                    }
                    skip += top;
                    localVarNumRequests++;
                }
                while (localVarRetrieved == top);
                ApiClient.GetField<JObject>(localVarRet, new string[] { "Statistics" }).Add("NumRequests", localVarNumRequests);
                return new ApiResponse<Object>(localVarFirstResponse.StatusCode, localVarFirstResponse.Headers, localVarRet);
            }
            else
            {
                IRestRequest localVarRequest = {{operationId}}BuildRequest({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
                IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarRequest);
                return {{operationId}}ProcessResponse(localVarRequest, localVarResponse);
            }
            {{/autoPaginate}}
            {{^autoPaginate}}
            IRestRequest localVarRequest = {{operationId}}BuildRequest({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarRequest);
            return {{operationId}}ProcessResponse(localVarRequest, localVarResponse);
            {{/autoPaginate}}
        }
        {{/supportsAsync}}
        #endregion {{operationId}}
        {{/operation}}
    }
    {{/operations}}
}
